jobs:
  macos:
    name: macOS build (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64, x86_64]
    env:
      PIP_ONLY_BINARY: ":all:"
      APP_NAME: "FindDiffEditor"
      ENTRY_FILE: "main.py"
      ICON_FILE: "Icon.icns"
      PY_VER: "3.11.9"   # 需要的 Python 版本（有 universal2 安装包）
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Rosetta for x86_64 (Apple Silicon runners)
        if: matrix.arch == 'x86_64'
        run: |
          if ! /usr/bin/pgrep oahd >/dev/null 2>&1; then
            sudo softwareupdate --install-rosetta --agree-to-license
          fi

      - name: Set deployment target per arch
        shell: bash
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          else
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

      # 🔽 仅在 x86_64 分支安装 python.org 的 universal2 Python
      - name: Install universal2 Python (x86_64 only)
        if: matrix.arch == 'x86_64'
        shell: bash
        run: |
          PKG="python-${PY_VER}-macos11.pkg"
          URL="https://www.python.org/ftp/python/${PY_VER}/${PKG}"
          curl -LO "$URL"
          sudo installer -pkg "$PKG" -target /
          # 记录 universal2 Python 路径（后续都用它）
          echo "PY_U2=/Library/Frameworks/Python.framework/Versions/${PY_VER%.*}/bin/python3" >> $GITHUB_ENV

      - name: Setup venv (${{ matrix.arch }})
        shell: bash
        run: |
          VENV=".venv-${{ matrix.arch }}"
          if [[ ! -d "$VENV" ]]; then
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              # 用 universal2 Python 在 Rosetta 下创建 x86_64 venv
              arch -x86_64 "$PY_U2" -m venv "$VENV"
            else
              # arm64 正常创建
              python3 -m venv "$VENV"
            fi
          fi
          echo "VENV_PATH=$VENV" >> $GITHUB_ENV

      - name: Install deps in venv (${{ matrix.arch }})
        shell: bash
        run: |
          source "$VENV_PATH/bin/activate"
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            arch -x86_64 python -m pip install --upgrade pip setuptools wheel
            export PIP_ONLY_BINARY=":all:"
            arch -x86_64 pip install -r requirements.txt
            arch -x86_64 pip install "pyinstaller>=6.9,<7" "altgraph>=0.17.4" "macholib>=1.16.3"
          else
            python -m pip install --upgrade pip setuptools wheel
            export PIP_ONLY_BINARY=":all:"
            pip install -r requirements.txt
            pip install "pyinstaller>=6.9,<7" "altgraph>=0.17.4" "macholib>=1.16.3"
          fi

      - name: Build app (${{ matrix.arch }})
        shell: bash
        run: |
          source "$VENV_PATH/bin/activate"
          NAME="${APP_NAME}-${{ matrix.arch }}"
          ARGS=( --noconfirm --name "$NAME" --windowed )
          if [[ -f "$ICON_FILE" ]]; then ARGS+=( --icon "$ICON_FILE" ); fi
          # 如需完整收集 PySide6 资源，取消下一行注释
          # ARGS+=( --collect-all PySide6 )

          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            arch -x86_64 pyinstaller "${ARGS[@]}" "$ENTRY_FILE"
          else
            pyinstaller "${ARGS[@]}" "$ENTRY_FILE"
          fi

          APP_PATH="dist/${NAME}.app"
          [[ -d "$APP_PATH" ]] || { echo "Build failed: $APP_PATH not found"; exit 1; }
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "DMG_NAME=${NAME}.dmg" >> $GITHUB_ENV

      - name: Create DMG (${{ matrix.arch }})
        shell: bash
        run: |
          hdiutil create -volname "${APP_NAME}-${{ matrix.arch }}" \
            -srcfolder "$APP_PATH" -ov -format UDZO "dist/${DMG_NAME}"

      - name: Zip .app (${{ matrix.arch }})
        shell: bash
        run: |
          cd dist
          zip -r "${APP_NAME}-${{ matrix.arch }}.app.zip" "${APP_NAME}-${{ matrix.arch }}.app"

      - name: Upload macOS artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: |
            dist/${{ env.APP_NAME }}-${{ matrix.arch }}.dmg
            dist/${{ env.APP_NAME }}-${{ matrix.arch }}.app.zip
