name: Build desktop packages

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  macos:
    name: macOS build (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64, x86_64]
    env:
      PIP_ONLY_BINARY: ":all:"
      APP_NAME: "FindDiffEditor"
      ENTRY_FILE: "main.py"
      ICON_FILE: "Icon.icns"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Rosetta for x86_64 (Apple Silicon runners)
        if: matrix.arch == 'x86_64'
        run: |
          # GitHub 的 macOS 14 运行器是 arm64，构建 x86_64 需要 Rosetta
          if ! /usr/bin/pgrep oahd >/dev/null 2>&1; then
            sudo softwareupdate --install-rosetta --agree-to-license
          fi

      - name: Set deployment target per arch
        shell: bash
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          else
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

      - name: Setup Python venv for ${{ matrix.arch }}
        shell: bash
        run: |
          VENV=".venv-${{ matrix.arch }}"
          if [[ ! -d "$VENV" ]]; then
            if command -v arch >/dev/null 2>&1; then
              arch -${{ matrix.arch }} python3 -m venv "$VENV"
            else
              python3 -m venv "$VENV"
            fi
          fi
          echo "VENV_PATH=$VENV" >> $GITHUB_ENV

      - name: Install deps in venv (${{ matrix.arch }})
        shell: bash
        run: |
          source "$VENV_PATH/bin/activate"
          python -m pip install --upgrade pip setuptools wheel
          # 避免源码编译，加快速度
          export PIP_ONLY_BINARY=":all:"
          pip install -r requirements.txt
          pip install "pyinstaller>=6.9,<7" "altgraph>=0.17.4" "macholib>=1.16.3"

      - name: Build app (${{ matrix.arch }})
        shell: bash
        run: |
          source "$VENV_PATH/bin/activate"

          NAME="${APP_NAME}-${{ matrix.arch }}"
          ARGS=( --noconfirm --name "$NAME" --windowed )
          if [[ -f "$ICON_FILE" ]]; then
            ARGS+=( --icon "$ICON_FILE" )
          fi

          # 可选：若 PySide6 需要完整收集插件，取消下一行注释
          # ARGS+=( --collect-all PySide6 )

          # 为防止多架构混淆，强制在该架构下运行 pyinstaller（带 arch 前缀）
          if command -v arch >/dev/null 2>&1; then
            arch -${{ matrix.arch }} pyinstaller "${ARGS[@]}" "$ENTRY_FILE"
          else
            pyinstaller "${ARGS[@]}" "$ENTRY_FILE"
          fi

          APP_PATH="dist/${NAME}.app"
          [[ -d "$APP_PATH" ]] || { echo "Build failed: $APP_PATH not found"; exit 1; }
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "DMG_NAME=${NAME}.dmg" >> $GITHUB_ENV

      - name: Create DMG (${{ matrix.arch }})
        shell: bash
        run: |
          hdiutil create -volname "${APP_NAME}-${{ matrix.arch }}" \
            -srcfolder "$APP_PATH" -ov -format UDZO "dist/${DMG_NAME}"

      - name: Zip .app (${{ matrix.arch }})
        shell: bash
        run: |
          cd dist
          zip -r "${APP_NAME}-${{ matrix.arch }}.app.zip" "${APP_NAME}-${{ matrix.arch }}.app"

      - name: Upload macOS artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: |
            dist/${{ env.APP_NAME }}-${{ matrix.arch }}.dmg
            dist/${{ env.APP_NAME }}-${{ matrix.arch }}.app.zip

  windows:
    name: Windows build
    runs-on: windows-latest
    env:
      PIP_ONLY_BINARY: ":all:"
      APP_NAME: "FindDiffEditor"
      ENTRY_FILE: "main.py"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install "pyinstaller>=6.9,<7"

      - name: Build Windows app
        shell: pwsh
        run: |
          $name = "$env:APP_NAME"
          $args = @(
            "--noconfirm",
            "--name", $name,
            "--windowed"
          )
          if (Test-Path "Icon.ico") { $args += @("--icon","Icon.ico") }
          # 可选：完整收集 PySide6
          # $args += @("--collect-all","PySide6")
          pyinstaller @args $env:ENTRY_FILE

      - name: Zip Windows dist
        shell: pwsh
        run: |
          $distDir = "dist/$env:APP_NAME"
          if (-not (Test-Path $distDir)) { throw "Dist not found: $distDir" }
          Compress-Archive -Path "$distDir/*" -DestinationPath "dist/$env:APP_NAME-windows.zip" -Force

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/FindDiffEditor-windows.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [macos, windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download macOS arm64
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: artifacts/macos-arm64

      - name: Download macOS x86_64
        uses: actions/download-artifact@v4
        with:
          name: macos-x86_64
          path: artifacts/macos-x86_64

      - name: Download Windows
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: artifacts/windows

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
            artifacts/**/*.dmg
          draft: false
          prerelease: false
